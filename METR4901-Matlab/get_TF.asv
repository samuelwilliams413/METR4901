%% function [] = get_TF(Transfer_Functions)
%
%%
function [] = get_TF(Transfer_Functions)
clc
verbose = 1;
syms s

signpost(verbose,'Start: get_TF()')
%% Initialise variables
signpost(verbose,'Initialise variables')

for i = 1:3
    place = strcat('Looping: ', int2str(i));
    signpost(verbose, place)
    
    %% Collect s
    signpost(verbose,'Collect s')
    CO(i,1) = rhs(collect(Transfer_Functions(i,1), s));
    
    %% Find coefficients of polynomial
    signpost(verbose,'Find coefficients of polynomial')
    
    cn = 0;
    cd = 0;
    if (CO(i,1) ~= 0)
        [n, d] = numden(CO(i,1));
        [cn, tn] = coeffs(n, s, 'all');
        [cd, td] = coeffs(d, s, 'all');
        p(cn)
        p(cd)
    end
    eq_n(i,:) = cn
    eq_d(i,:) = cd
    
    %% Create tunable real parameters
    % Create tunable real parameters with an initial value of 1.
    syms l1 l2 l3
    syms L1 L2 L3
    syms a1 da1 dda1
    syms a2 da2 dda2
    syms a3 da3 dda3
    syms Ixx1 Ixx2 Ixx3
    syms Iyy1 Iyy2 Iyy3
    syms Izz1 Izz2 Izz3
    syms m1 m2 m3
    
    l1 = realp('l1',1)
    l2 = realp('l2',1)
    l3 = realp('l3',1)
    
    L1 = realp('L1',1)
    L2 = realp('L2',1)
    L3 = realp('L3',1)
    
    a1 = realp('a1',1)
    
    A1 = realp('a1',1)
    
    %% Creating Transfer Functions from polynomial
    signpost(verbose,'Creating Transfer Functions from polynomial')
    
    H(i,1) = tf(eq_n(i), eq_d(i))
    
    
    %% Tidy Up
end

signpost(verbose,'Done: get_TF()')

p(CO)
p(eq_n)
p(eq_d)
p(H)
end