
_Dastard_Matador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001b94  08001b94  00011b94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000027c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000280  20000280  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e9e9  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020b5  00000000  00000000  0002ea1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003374  00000000  00000000  00030ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005d0  00000000  00000000  00033e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008b0  00000000  00000000  00034418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003e0e  00000000  00000000  00034cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000258d  00000000  00000000  00038ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b063  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e8c  00000000  00000000  0003b0e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b7c 	.word	0x08001b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001b7c 	.word	0x08001b7c

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
{
 80001cc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 f87c 	bl	80002d4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 f836 	bl	8000254 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000

080001f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4a07      	ldr	r2, [pc, #28]	; (8000210 <HAL_Init+0x20>)
{
 80001f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f043 0310 	orr.w	r3, r3, #16
 80001fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f817 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	2000      	movs	r0, #0
 8000204:	f7ff ffe0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000208:	f001 fafe 	bl	8001808 <HAL_MspInit>
}
 800020c:	2000      	movs	r0, #0
 800020e:	bd08      	pop	{r3, pc}
 8000210:	40022000 	.word	0x40022000

08000214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000214:	4a02      	ldr	r2, [pc, #8]	; (8000220 <HAL_IncTick+0xc>)
 8000216:	6813      	ldr	r3, [r2, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	6013      	str	r3, [r2, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000020 	.word	0x20000020

08000224 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000224:	4b01      	ldr	r3, [pc, #4]	; (800022c <HAL_GetTick+0x8>)
 8000226:	6818      	ldr	r0, [r3, #0]
}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000020 	.word	0x20000020

08000230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	0c1b      	lsrs	r3, r3, #16
 800023c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000240:	0200      	lsls	r0, r0, #8
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800024a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800024c:	60d3      	str	r3, [r2, #12]
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000254:	4b17      	ldr	r3, [pc, #92]	; (80002b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000256:	b530      	push	{r4, r5, lr}
 8000258:	68dc      	ldr	r4, [r3, #12]
 800025a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000264:	2b04      	cmp	r3, #4
 8000266:	bf28      	it	cs
 8000268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800026c:	f04f 0501 	mov.w	r5, #1
 8000270:	fa05 f303 	lsl.w	r3, r5, r3
 8000274:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	bf8c      	ite	hi
 800027a:	3c03      	subhi	r4, #3
 800027c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800027e:	4019      	ands	r1, r3
 8000280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000282:	fa05 f404 	lsl.w	r4, r5, r4
 8000286:	3c01      	subs	r4, #1
 8000288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800028a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028c:	ea42 0201 	orr.w	r2, r2, r1
 8000290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	bfaf      	iteee	ge
 8000296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	f000 000f 	andlt.w	r0, r0, #15
 800029e:	4b06      	ldrlt	r3, [pc, #24]	; (80002b8 <HAL_NVIC_SetPriority+0x64>)
 80002a0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	bfa5      	ittet	ge
 80002a4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00
 80002b8:	e000ed14 	.word	0xe000ed14

080002bc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002bc:	0942      	lsrs	r2, r0, #5
 80002be:	2301      	movs	r3, #1
 80002c0:	f000 001f 	and.w	r0, r0, #31
 80002c4:	fa03 f000 	lsl.w	r0, r3, r0
 80002c8:	4b01      	ldr	r3, [pc, #4]	; (80002d0 <HAL_NVIC_EnableIRQ+0x14>)
 80002ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002ce:	4770      	bx	lr
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002d4:	3801      	subs	r0, #1
 80002d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002da:	d20a      	bcs.n	80002f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002e0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	21f0      	movs	r1, #240	; 0xf0
 80002e4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000302:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000304:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000306:	bf0c      	ite	eq
 8000308:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800030c:	f022 0204 	bicne.w	r2, r2, #4
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	4770      	bx	lr
 8000314:	e000e010 	.word	0xe000e010

08000318 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000318:	4770      	bx	lr

0800031a <HAL_SYSTICK_IRQHandler>:
{
 800031a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800031c:	f7ff fffc 	bl	8000318 <HAL_SYSTICK_Callback>
 8000320:	bd08      	pop	{r3, pc}
	...

08000324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000324:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000326:	b350      	cbz	r0, 800037e <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000328:	6884      	ldr	r4, [r0, #8]
 800032a:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 800032c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800032e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000330:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8000332:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000334:	4323      	orrs	r3, r4
 8000336:	6904      	ldr	r4, [r0, #16]
 8000338:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800033a:	6944      	ldr	r4, [r0, #20]
 800033c:	4323      	orrs	r3, r4
 800033e:	6984      	ldr	r4, [r0, #24]
 8000340:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000342:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000344:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000348:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800034c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800034e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000350:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <HAL_DMA_Init+0x60>)
 8000354:	2214      	movs	r2, #20
 8000356:	440b      	add	r3, r1
 8000358:	fbb3 f3f2 	udiv	r3, r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <HAL_DMA_Init+0x64>)
 8000362:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8000364:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000366:	2300      	movs	r3, #0
 8000368:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800036a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800036c:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800036e:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000370:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000372:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000376:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 800037a:	4618      	mov	r0, r3
 800037c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800037e:	2001      	movs	r0, #1
}  
 8000380:	bd10      	pop	{r4, pc}
 8000382:	bf00      	nop
 8000384:	bffdfff8 	.word	0xbffdfff8
 8000388:	40020000 	.word	0x40020000

0800038c <HAL_DMA_Start_IT>:
{
 800038c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800038e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000392:	2c01      	cmp	r4, #1
 8000394:	d035      	beq.n	8000402 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000396:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800039a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800039c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 800039e:	f880 4020 	strb.w	r4, [r0, #32]
 80003a2:	f04f 0600 	mov.w	r6, #0
 80003a6:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 80003aa:	d128      	bne.n	80003fe <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80003ac:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003b0:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003b2:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003b4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80003b6:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80003b8:	f026 0601 	bic.w	r6, r6, #1
 80003bc:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80003be:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80003c0:	40bd      	lsls	r5, r7
 80003c2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80003c4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80003c6:	6843      	ldr	r3, [r0, #4]
 80003c8:	6805      	ldr	r5, [r0, #0]
 80003ca:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80003cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80003ce:	bf0b      	itete	eq
 80003d0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80003d2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80003d4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80003d6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80003d8:	b14b      	cbz	r3, 80003ee <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80003da:	6823      	ldr	r3, [r4, #0]
 80003dc:	f043 030e 	orr.w	r3, r3, #14
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80003e0:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80003e2:	682b      	ldr	r3, [r5, #0]
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80003ea:	2000      	movs	r0, #0
 80003ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80003ee:	6823      	ldr	r3, [r4, #0]
 80003f0:	f043 030a 	orr.w	r3, r3, #10
 80003f4:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80003f6:	6823      	ldr	r3, [r4, #0]
 80003f8:	f023 0304 	bic.w	r3, r3, #4
 80003fc:	e7f0      	b.n	80003e0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80003fe:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000402:	2002      	movs	r0, #2
} 
 8000404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000406 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000406:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800040a:	2a02      	cmp	r2, #2
{  
 800040c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800040e:	d003      	beq.n	8000418 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000410:	2204      	movs	r2, #4
 8000412:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000414:	2001      	movs	r0, #1
 8000416:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000418:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800041a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800041c:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 800041e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000420:	f021 010e 	bic.w	r1, r1, #14
 8000424:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000426:	6811      	ldr	r1, [r2, #0]
 8000428:	f021 0101 	bic.w	r1, r1, #1
 800042c:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800042e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000430:	2101      	movs	r1, #1
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000438:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800043a:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800043e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000442:	b113      	cbz	r3, 800044a <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000444:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000446:	4620      	mov	r0, r4
 8000448:	bd10      	pop	{r4, pc}
 800044a:	4618      	mov	r0, r3
}
 800044c:	bd10      	pop	{r4, pc}

0800044e <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800044e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000450:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8000452:	6803      	ldr	r3, [r0, #0]
{
 8000454:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000456:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000458:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800045a:	2404      	movs	r4, #4
 800045c:	4094      	lsls	r4, r2
 800045e:	4226      	tst	r6, r4
 8000460:	d00e      	beq.n	8000480 <HAL_DMA_IRQHandler+0x32>
 8000462:	f015 0f04 	tst.w	r5, #4
 8000466:	d00b      	beq.n	8000480 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800046c:	bf5e      	ittt	pl
 800046e:	681a      	ldrpl	r2, [r3, #0]
 8000470:	f022 0204 	bicpl.w	r2, r2, #4
 8000474:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000478:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 800047a:	b373      	cbz	r3, 80004da <HAL_DMA_IRQHandler+0x8c>
}  
 800047c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800047e:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000480:	2402      	movs	r4, #2
 8000482:	4094      	lsls	r4, r2
 8000484:	4226      	tst	r6, r4
 8000486:	d012      	beq.n	80004ae <HAL_DMA_IRQHandler+0x60>
 8000488:	f015 0f02 	tst.w	r5, #2
 800048c:	d00f      	beq.n	80004ae <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	0695      	lsls	r5, r2, #26
 8000492:	d406      	bmi.n	80004a2 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	f022 020a 	bic.w	r2, r2, #10
 800049a:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800049c:	2301      	movs	r3, #1
 800049e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80004a2:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80004a4:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80004a6:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80004aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80004ac:	e7e5      	b.n	800047a <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004ae:	2408      	movs	r4, #8
 80004b0:	4094      	lsls	r4, r2
 80004b2:	4234      	tst	r4, r6
 80004b4:	d011      	beq.n	80004da <HAL_DMA_IRQHandler+0x8c>
 80004b6:	072c      	lsls	r4, r5, #28
 80004b8:	d50f      	bpl.n	80004da <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004ba:	681c      	ldr	r4, [r3, #0]
 80004bc:	f024 040e 	bic.w	r4, r4, #14
 80004c0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004c2:	2301      	movs	r3, #1
 80004c4:	fa03 f202 	lsl.w	r2, r3, r2
 80004c8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80004ca:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80004cc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80004d0:	2300      	movs	r3, #0
 80004d2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80004d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004d8:	e7cf      	b.n	800047a <HAL_DMA_IRQHandler+0x2c>
}  
 80004da:	bc70      	pop	{r4, r5, r6}
 80004dc:	4770      	bx	lr
	...

080004e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e8:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000650 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004ec:	4a56      	ldr	r2, [pc, #344]	; (8000648 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004ee:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80004f0:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 80004f4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004f6:	9c01      	ldr	r4, [sp, #4]
 80004f8:	40dc      	lsrs	r4, r3
 80004fa:	d102      	bne.n	8000502 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80004fc:	b005      	add	sp, #20
 80004fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000502:	2401      	movs	r4, #1
 8000504:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000508:	9c01      	ldr	r4, [sp, #4]
 800050a:	ea14 050a 	ands.w	r5, r4, sl
 800050e:	f000 8093 	beq.w	8000638 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000512:	684c      	ldr	r4, [r1, #4]
 8000514:	f024 0b10 	bic.w	fp, r4, #16
 8000518:	f1bb 0f02 	cmp.w	fp, #2
 800051c:	d111      	bne.n	8000542 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800051e:	08df      	lsrs	r7, r3, #3
 8000520:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000524:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000528:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800052a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800052e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000532:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000536:	690e      	ldr	r6, [r1, #16]
 8000538:	fa06 f60e 	lsl.w	r6, r6, lr
 800053c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000540:	623e      	str	r6, [r7, #32]
 8000542:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000546:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000548:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800054a:	fa07 f70c 	lsl.w	r7, r7, ip
 800054e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000550:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000554:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000556:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800055a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800055e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000562:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000566:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000568:	d811      	bhi.n	800058e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 800056a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800056c:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000570:	68ce      	ldr	r6, [r1, #12]
 8000572:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000576:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800057a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800057c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800057e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000586:	409e      	lsls	r6, r3
 8000588:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800058c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800058e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000590:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000592:	688e      	ldr	r6, [r1, #8]
 8000594:	fa06 f60c 	lsl.w	r6, r6, ip
 8000598:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800059c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059e:	d54b      	bpl.n	8000638 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80005a4:	f046 0601 	orr.w	r6, r6, #1
 80005a8:	f8c8 6018 	str.w	r6, [r8, #24]
 80005ac:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80005b0:	f023 0703 	bic.w	r7, r3, #3
 80005b4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80005b8:	f006 0601 	and.w	r6, r6, #1
 80005bc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80005c0:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005c2:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c6:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80005c8:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80005ce:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005d2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005d6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005da:	d02f      	beq.n	800063c <HAL_GPIO_Init+0x15c>
 80005dc:	4e1b      	ldr	r6, [pc, #108]	; (800064c <HAL_GPIO_Init+0x16c>)
 80005de:	42b0      	cmp	r0, r6
 80005e0:	d02e      	beq.n	8000640 <HAL_GPIO_Init+0x160>
 80005e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005e6:	42b0      	cmp	r0, r6
 80005e8:	d02c      	beq.n	8000644 <HAL_GPIO_Init+0x164>
 80005ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005ee:	42b0      	cmp	r0, r6
 80005f0:	bf14      	ite	ne
 80005f2:	2605      	movne	r6, #5
 80005f4:	2603      	moveq	r6, #3
 80005f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80005fa:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80005fe:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000600:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000602:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000604:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000608:	bf0c      	ite	eq
 800060a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800060c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800060e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000610:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000616:	bf0c      	ite	eq
 8000618:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800061a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 800061c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800061e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000620:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000624:	bf0c      	ite	eq
 8000626:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000628:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800062a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800062c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800062e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000630:	bf54      	ite	pl
 8000632:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000634:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000636:	60d6      	str	r6, [r2, #12]
    position++;
 8000638:	3301      	adds	r3, #1
 800063a:	e75c      	b.n	80004f6 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800063c:	2600      	movs	r6, #0
 800063e:	e7da      	b.n	80005f6 <HAL_GPIO_Init+0x116>
 8000640:	2601      	movs	r6, #1
 8000642:	e7d8      	b.n	80005f6 <HAL_GPIO_Init+0x116>
 8000644:	2602      	movs	r6, #2
 8000646:	e7d6      	b.n	80005f6 <HAL_GPIO_Init+0x116>
 8000648:	40010400 	.word	0x40010400
 800064c:	48000400 	.word	0x48000400
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000654:	b10a      	cbz	r2, 800065a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000656:	6181      	str	r1, [r0, #24]
 8000658:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800065a:	6281      	str	r1, [r0, #40]	; 0x28
 800065c:	4770      	bx	lr
	...

08000660 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000660:	6803      	ldr	r3, [r0, #0]
 8000662:	07da      	lsls	r2, r3, #31
{
 8000664:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000668:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800066a:	d411      	bmi.n	8000690 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	079b      	lsls	r3, r3, #30
 8000670:	f100 8088 	bmi.w	8000784 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	071c      	lsls	r4, r3, #28
 8000678:	f100 80f8 	bmi.w	800086c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800067c:	682b      	ldr	r3, [r5, #0]
 800067e:	0758      	lsls	r0, r3, #29
 8000680:	f100 8141 	bmi.w	8000906 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000684:	69ea      	ldr	r2, [r5, #28]
 8000686:	2a00      	cmp	r2, #0
 8000688:	f040 81d7 	bne.w	8000a3a <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800068c:	2000      	movs	r0, #0
 800068e:	e021      	b.n	80006d4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000690:	4cba      	ldr	r4, [pc, #744]	; (800097c <HAL_RCC_OscConfig+0x31c>)
 8000692:	6863      	ldr	r3, [r4, #4]
 8000694:	f003 030c 	and.w	r3, r3, #12
 8000698:	2b04      	cmp	r3, #4
 800069a:	d007      	beq.n	80006ac <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800069c:	6863      	ldr	r3, [r4, #4]
 800069e:	f003 030c 	and.w	r3, r3, #12
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	d119      	bne.n	80006da <HAL_RCC_OscConfig+0x7a>
 80006a6:	6863      	ldr	r3, [r4, #4]
 80006a8:	03df      	lsls	r7, r3, #15
 80006aa:	d516      	bpl.n	80006da <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006b4:	6821      	ldr	r1, [r4, #0]
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	fab3 f383 	clz	r3, r3
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	2201      	movs	r2, #1
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	420b      	tst	r3, r1
 80006ca:	d0cf      	beq.n	800066c <HAL_RCC_OscConfig+0xc>
 80006cc:	686b      	ldr	r3, [r5, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1cc      	bne.n	800066c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80006d2:	2001      	movs	r0, #1
}
 80006d4:	b002      	add	sp, #8
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006da:	686a      	ldr	r2, [r5, #4]
 80006dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80006e0:	d125      	bne.n	800072e <HAL_RCC_OscConfig+0xce>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006e8:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006ec:	68a9      	ldr	r1, [r5, #8]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	430b      	orrs	r3, r1
 80006f4:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006f6:	b352      	cbz	r2, 800074e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 80006f8:	f7ff fd94 	bl	8000224 <HAL_GetTick>
 80006fc:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000700:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000702:	2701      	movs	r7, #1
 8000704:	fa96 f3a6 	rbit	r3, r6
 8000708:	6822      	ldr	r2, [r4, #0]
 800070a:	fa96 f3a6 	rbit	r3, r6
 800070e:	fab3 f383 	clz	r3, r3
 8000712:	f003 031f 	and.w	r3, r3, #31
 8000716:	fa07 f303 	lsl.w	r3, r7, r3
 800071a:	4213      	tst	r3, r2
 800071c:	d1a6      	bne.n	800066c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800071e:	f7ff fd81 	bl	8000224 <HAL_GetTick>
 8000722:	eba0 0008 	sub.w	r0, r0, r8
 8000726:	2864      	cmp	r0, #100	; 0x64
 8000728:	d9ec      	bls.n	8000704 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 800072a:	2003      	movs	r0, #3
 800072c:	e7d2      	b.n	80006d4 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	b932      	cbnz	r2, 8000740 <HAL_RCC_OscConfig+0xe0>
 8000732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000736:	6023      	str	r3, [r4, #0]
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	e7d3      	b.n	80006e8 <HAL_RCC_OscConfig+0x88>
 8000740:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000744:	d1f5      	bne.n	8000732 <HAL_RCC_OscConfig+0xd2>
 8000746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800074a:	6023      	str	r3, [r4, #0]
 800074c:	e7c9      	b.n	80006e2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800074e:	f7ff fd69 	bl	8000224 <HAL_GetTick>
 8000752:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000756:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000758:	2701      	movs	r7, #1
 800075a:	fa96 f3a6 	rbit	r3, r6
 800075e:	6822      	ldr	r2, [r4, #0]
 8000760:	fa96 f3a6 	rbit	r3, r6
 8000764:	fab3 f383 	clz	r3, r3
 8000768:	f003 031f 	and.w	r3, r3, #31
 800076c:	fa07 f303 	lsl.w	r3, r7, r3
 8000770:	4213      	tst	r3, r2
 8000772:	f43f af7b 	beq.w	800066c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000776:	f7ff fd55 	bl	8000224 <HAL_GetTick>
 800077a:	eba0 0008 	sub.w	r0, r0, r8
 800077e:	2864      	cmp	r0, #100	; 0x64
 8000780:	d9eb      	bls.n	800075a <HAL_RCC_OscConfig+0xfa>
 8000782:	e7d2      	b.n	800072a <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000784:	4c7d      	ldr	r4, [pc, #500]	; (800097c <HAL_RCC_OscConfig+0x31c>)
 8000786:	6863      	ldr	r3, [r4, #4]
 8000788:	f013 0f0c 	tst.w	r3, #12
 800078c:	d007      	beq.n	800079e <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800078e:	6863      	ldr	r3, [r4, #4]
 8000790:	f003 030c 	and.w	r3, r3, #12
 8000794:	2b08      	cmp	r3, #8
 8000796:	d121      	bne.n	80007dc <HAL_RCC_OscConfig+0x17c>
 8000798:	6863      	ldr	r3, [r4, #4]
 800079a:	03de      	lsls	r6, r3, #15
 800079c:	d41e      	bmi.n	80007dc <HAL_RCC_OscConfig+0x17c>
 800079e:	2302      	movs	r3, #2
 80007a0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007a4:	6821      	ldr	r1, [r4, #0]
 80007a6:	fa93 f3a3 	rbit	r3, r3
 80007aa:	fab3 f383 	clz	r3, r3
 80007ae:	f003 031f 	and.w	r3, r3, #31
 80007b2:	2201      	movs	r2, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	420b      	tst	r3, r1
 80007ba:	d002      	beq.n	80007c2 <HAL_RCC_OscConfig+0x162>
 80007bc:	692b      	ldr	r3, [r5, #16]
 80007be:	4293      	cmp	r3, r2
 80007c0:	d187      	bne.n	80006d2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007c2:	6821      	ldr	r1, [r4, #0]
 80007c4:	23f8      	movs	r3, #248	; 0xf8
 80007c6:	fa93 f3a3 	rbit	r3, r3
 80007ca:	fab3 f283 	clz	r2, r3
 80007ce:	696b      	ldr	r3, [r5, #20]
 80007d0:	4093      	lsls	r3, r2
 80007d2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80007d6:	4313      	orrs	r3, r2
 80007d8:	6023      	str	r3, [r4, #0]
 80007da:	e74b      	b.n	8000674 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007dc:	692a      	ldr	r2, [r5, #16]
 80007de:	2601      	movs	r6, #1
 80007e0:	b30a      	cbz	r2, 8000826 <HAL_RCC_OscConfig+0x1c6>
 80007e2:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80007e6:	fab3 f383 	clz	r3, r3
 80007ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	2702      	movs	r7, #2
 80007f6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80007f8:	f7ff fd14 	bl	8000224 <HAL_GetTick>
 80007fc:	4680      	mov	r8, r0
 80007fe:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000802:	6822      	ldr	r2, [r4, #0]
 8000804:	fa97 f3a7 	rbit	r3, r7
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	f003 031f 	and.w	r3, r3, #31
 8000810:	fa06 f303 	lsl.w	r3, r6, r3
 8000814:	4213      	tst	r3, r2
 8000816:	d1d4      	bne.n	80007c2 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000818:	f7ff fd04 	bl	8000224 <HAL_GetTick>
 800081c:	eba0 0008 	sub.w	r0, r0, r8
 8000820:	2802      	cmp	r0, #2
 8000822:	d9ec      	bls.n	80007fe <HAL_RCC_OscConfig+0x19e>
 8000824:	e781      	b.n	800072a <HAL_RCC_OscConfig+0xca>
 8000826:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800082a:	fab3 f383 	clz	r3, r3
 800082e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000832:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	2702      	movs	r7, #2
 800083a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800083c:	f7ff fcf2 	bl	8000224 <HAL_GetTick>
 8000840:	4680      	mov	r8, r0
 8000842:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000846:	6822      	ldr	r2, [r4, #0]
 8000848:	fa97 f3a7 	rbit	r3, r7
 800084c:	fab3 f383 	clz	r3, r3
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	fa06 f303 	lsl.w	r3, r6, r3
 8000858:	4213      	tst	r3, r2
 800085a:	f43f af0b 	beq.w	8000674 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800085e:	f7ff fce1 	bl	8000224 <HAL_GetTick>
 8000862:	eba0 0008 	sub.w	r0, r0, r8
 8000866:	2802      	cmp	r0, #2
 8000868:	d9eb      	bls.n	8000842 <HAL_RCC_OscConfig+0x1e2>
 800086a:	e75e      	b.n	800072a <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800086c:	69aa      	ldr	r2, [r5, #24]
 800086e:	4e43      	ldr	r6, [pc, #268]	; (800097c <HAL_RCC_OscConfig+0x31c>)
 8000870:	4943      	ldr	r1, [pc, #268]	; (8000980 <HAL_RCC_OscConfig+0x320>)
 8000872:	2401      	movs	r4, #1
 8000874:	b31a      	cbz	r2, 80008be <HAL_RCC_OscConfig+0x25e>
 8000876:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800087a:	fab3 f383 	clz	r3, r3
 800087e:	440b      	add	r3, r1
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	2702      	movs	r7, #2
 8000884:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000886:	f7ff fccd 	bl	8000224 <HAL_GetTick>
 800088a:	4680      	mov	r8, r0
 800088c:	fa97 f3a7 	rbit	r3, r7
 8000890:	fa97 f3a7 	rbit	r3, r7
 8000894:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000898:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800089a:	fa97 f3a7 	rbit	r3, r7
 800089e:	fab3 f383 	clz	r3, r3
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	fa04 f303 	lsl.w	r3, r4, r3
 80008aa:	4213      	tst	r3, r2
 80008ac:	f47f aee6 	bne.w	800067c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008b0:	f7ff fcb8 	bl	8000224 <HAL_GetTick>
 80008b4:	eba0 0008 	sub.w	r0, r0, r8
 80008b8:	2802      	cmp	r0, #2
 80008ba:	d9e7      	bls.n	800088c <HAL_RCC_OscConfig+0x22c>
 80008bc:	e735      	b.n	800072a <HAL_RCC_OscConfig+0xca>
 80008be:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80008c2:	fab3 f383 	clz	r3, r3
 80008c6:	440b      	add	r3, r1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	2702      	movs	r7, #2
 80008cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008ce:	f7ff fca9 	bl	8000224 <HAL_GetTick>
 80008d2:	4680      	mov	r8, r0
 80008d4:	fa97 f3a7 	rbit	r3, r7
 80008d8:	fa97 f3a7 	rbit	r3, r7
 80008dc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80008e2:	fa97 f3a7 	rbit	r3, r7
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	f003 031f 	and.w	r3, r3, #31
 80008ee:	fa04 f303 	lsl.w	r3, r4, r3
 80008f2:	4213      	tst	r3, r2
 80008f4:	f43f aec2 	beq.w	800067c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008f8:	f7ff fc94 	bl	8000224 <HAL_GetTick>
 80008fc:	eba0 0008 	sub.w	r0, r0, r8
 8000900:	2802      	cmp	r0, #2
 8000902:	d9e7      	bls.n	80008d4 <HAL_RCC_OscConfig+0x274>
 8000904:	e711      	b.n	800072a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000906:	4c1d      	ldr	r4, [pc, #116]	; (800097c <HAL_RCC_OscConfig+0x31c>)
 8000908:	69e3      	ldr	r3, [r4, #28]
 800090a:	00d9      	lsls	r1, r3, #3
 800090c:	d434      	bmi.n	8000978 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	69e3      	ldr	r3, [r4, #28]
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	61e3      	str	r3, [r4, #28]
 8000916:	69e3      	ldr	r3, [r4, #28]
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000920:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000922:	4f18      	ldr	r7, [pc, #96]	; (8000984 <HAL_RCC_OscConfig+0x324>)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	05da      	lsls	r2, r3, #23
 8000928:	d52e      	bpl.n	8000988 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800092a:	68eb      	ldr	r3, [r5, #12]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d13c      	bne.n	80009aa <HAL_RCC_OscConfig+0x34a>
 8000930:	6a23      	ldr	r3, [r4, #32]
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000938:	f7ff fc74 	bl	8000224 <HAL_GetTick>
 800093c:	2702      	movs	r7, #2
 800093e:	4682      	mov	sl, r0
 8000940:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000942:	f04f 0801 	mov.w	r8, #1
 8000946:	fa97 f3a7 	rbit	r3, r7
 800094a:	fa97 f3a7 	rbit	r3, r7
 800094e:	2b00      	cmp	r3, #0
 8000950:	d06b      	beq.n	8000a2a <HAL_RCC_OscConfig+0x3ca>
 8000952:	6a22      	ldr	r2, [r4, #32]
 8000954:	fa99 f3a9 	rbit	r3, r9
 8000958:	fab3 f383 	clz	r3, r3
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	fa08 f303 	lsl.w	r3, r8, r3
 8000964:	4213      	tst	r3, r2
 8000966:	d057      	beq.n	8000a18 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 8000968:	2e00      	cmp	r6, #0
 800096a:	f43f ae8b 	beq.w	8000684 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800096e:	69e3      	ldr	r3, [r4, #28]
 8000970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000974:	61e3      	str	r3, [r4, #28]
 8000976:	e685      	b.n	8000684 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000978:	2600      	movs	r6, #0
 800097a:	e7d2      	b.n	8000922 <HAL_RCC_OscConfig+0x2c2>
 800097c:	40021000 	.word	0x40021000
 8000980:	10908120 	.word	0x10908120
 8000984:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000990:	f7ff fc48 	bl	8000224 <HAL_GetTick>
 8000994:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	d4c6      	bmi.n	800092a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800099c:	f7ff fc42 	bl	8000224 <HAL_GetTick>
 80009a0:	eba0 0008 	sub.w	r0, r0, r8
 80009a4:	2864      	cmp	r0, #100	; 0x64
 80009a6:	d9f6      	bls.n	8000996 <HAL_RCC_OscConfig+0x336>
 80009a8:	e6bf      	b.n	800072a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009aa:	bb3b      	cbnz	r3, 80009fc <HAL_RCC_OscConfig+0x39c>
 80009ac:	6a23      	ldr	r3, [r4, #32]
 80009ae:	f023 0301 	bic.w	r3, r3, #1
 80009b2:	6223      	str	r3, [r4, #32]
 80009b4:	6a23      	ldr	r3, [r4, #32]
 80009b6:	f023 0304 	bic.w	r3, r3, #4
 80009ba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009bc:	f7ff fc32 	bl	8000224 <HAL_GetTick>
 80009c0:	2702      	movs	r7, #2
 80009c2:	4682      	mov	sl, r0
 80009c4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009c6:	f04f 0801 	mov.w	r8, #1
 80009ca:	fa97 f3a7 	rbit	r3, r7
 80009ce:	fa97 f3a7 	rbit	r3, r7
 80009d2:	b373      	cbz	r3, 8000a32 <HAL_RCC_OscConfig+0x3d2>
 80009d4:	6a22      	ldr	r2, [r4, #32]
 80009d6:	fa99 f3a9 	rbit	r3, r9
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	f003 031f 	and.w	r3, r3, #31
 80009e2:	fa08 f303 	lsl.w	r3, r8, r3
 80009e6:	4213      	tst	r3, r2
 80009e8:	d0be      	beq.n	8000968 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ea:	f7ff fc1b 	bl	8000224 <HAL_GetTick>
 80009ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80009f2:	eba0 000a 	sub.w	r0, r0, sl
 80009f6:	4298      	cmp	r0, r3
 80009f8:	d9e7      	bls.n	80009ca <HAL_RCC_OscConfig+0x36a>
 80009fa:	e696      	b.n	800072a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fc:	2b05      	cmp	r3, #5
 80009fe:	6a23      	ldr	r3, [r4, #32]
 8000a00:	d103      	bne.n	8000a0a <HAL_RCC_OscConfig+0x3aa>
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6223      	str	r3, [r4, #32]
 8000a08:	e792      	b.n	8000930 <HAL_RCC_OscConfig+0x2d0>
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	6223      	str	r3, [r4, #32]
 8000a10:	6a23      	ldr	r3, [r4, #32]
 8000a12:	f023 0304 	bic.w	r3, r3, #4
 8000a16:	e78e      	b.n	8000936 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a18:	f7ff fc04 	bl	8000224 <HAL_GetTick>
 8000a1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a20:	eba0 000a 	sub.w	r0, r0, sl
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d98e      	bls.n	8000946 <HAL_RCC_OscConfig+0x2e6>
 8000a28:	e67f      	b.n	800072a <HAL_RCC_OscConfig+0xca>
 8000a2a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a30:	e790      	b.n	8000954 <HAL_RCC_OscConfig+0x2f4>
 8000a32:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a38:	e7cd      	b.n	80009d6 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a3a:	4c41      	ldr	r4, [pc, #260]	; (8000b40 <HAL_RCC_OscConfig+0x4e0>)
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	f003 030c 	and.w	r3, r3, #12
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	f43f ae45 	beq.w	80006d2 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a48:	2a02      	cmp	r2, #2
 8000a4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a4e:	d152      	bne.n	8000af6 <HAL_RCC_OscConfig+0x496>
 8000a50:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a54:	fab3 f383 	clz	r3, r3
 8000a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a66:	f7ff fbdd 	bl	8000224 <HAL_GetTick>
 8000a6a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a6e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a70:	2601      	movs	r6, #1
 8000a72:	fa97 f3a7 	rbit	r3, r7
 8000a76:	6822      	ldr	r2, [r4, #0]
 8000a78:	fa97 f3a7 	rbit	r3, r7
 8000a7c:	fab3 f383 	clz	r3, r3
 8000a80:	f003 031f 	and.w	r3, r3, #31
 8000a84:	fa06 f303 	lsl.w	r3, r6, r3
 8000a88:	4213      	tst	r3, r2
 8000a8a:	d12d      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a8c:	6862      	ldr	r2, [r4, #4]
 8000a8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a90:	6a29      	ldr	r1, [r5, #32]
 8000a92:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a96:	430b      	orrs	r3, r1
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	6063      	str	r3, [r4, #4]
 8000a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000aa4:	fab3 f383 	clz	r3, r3
 8000aa8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000aac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ab6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fbb4 	bl	8000224 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000abc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000abe:	4607      	mov	r7, r0
 8000ac0:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ac4:	6822      	ldr	r2, [r4, #0]
 8000ac6:	fa95 f3a5 	rbit	r3, r5
 8000aca:	fab3 f383 	clz	r3, r3
 8000ace:	f003 031f 	and.w	r3, r3, #31
 8000ad2:	fa06 f303 	lsl.w	r3, r6, r3
 8000ad6:	4213      	tst	r3, r2
 8000ad8:	f47f add8 	bne.w	800068c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000adc:	f7ff fba2 	bl	8000224 <HAL_GetTick>
 8000ae0:	1bc0      	subs	r0, r0, r7
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9ec      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x460>
 8000ae6:	e620      	b.n	800072a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae8:	f7ff fb9c 	bl	8000224 <HAL_GetTick>
 8000aec:	eba0 0008 	sub.w	r0, r0, r8
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9be      	bls.n	8000a72 <HAL_RCC_OscConfig+0x412>
 8000af4:	e619      	b.n	800072a <HAL_RCC_OscConfig+0xca>
 8000af6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000afa:	fab3 f383 	clz	r3, r3
 8000afe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b0c:	f7ff fb8a 	bl	8000224 <HAL_GetTick>
 8000b10:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b14:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b16:	2601      	movs	r6, #1
 8000b18:	fa95 f3a5 	rbit	r3, r5
 8000b1c:	6822      	ldr	r2, [r4, #0]
 8000b1e:	fa95 f3a5 	rbit	r3, r5
 8000b22:	fab3 f383 	clz	r3, r3
 8000b26:	f003 031f 	and.w	r3, r3, #31
 8000b2a:	fa06 f303 	lsl.w	r3, r6, r3
 8000b2e:	4213      	tst	r3, r2
 8000b30:	f43f adac 	beq.w	800068c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fb76 	bl	8000224 <HAL_GetTick>
 8000b38:	1bc0      	subs	r0, r0, r7
 8000b3a:	2802      	cmp	r0, #2
 8000b3c:	d9ec      	bls.n	8000b18 <HAL_RCC_OscConfig+0x4b8>
 8000b3e:	e5f4      	b.n	800072a <HAL_RCC_OscConfig+0xca>
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b44:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000b46:	4c13      	ldr	r4, [pc, #76]	; (8000b94 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b48:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000b4a:	f001 030c 	and.w	r3, r1, #12
 8000b4e:	2b08      	cmp	r3, #8
 8000b50:	d11e      	bne.n	8000b90 <HAL_RCC_GetSysClockFreq+0x4c>
 8000b52:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000b56:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b5a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b68:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	fa92 f2a2 	rbit	r2, r2
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b7e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b80:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b82:	bf4a      	itet	mi
 8000b84:	4b06      	ldrmi	r3, [pc, #24]	; (8000ba0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b86:	4b07      	ldrpl	r3, [pc, #28]	; (8000ba4 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b88:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b8c:	4358      	muls	r0, r3
 8000b8e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b92:	bd10      	pop	{r4, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	08001b94 	.word	0x08001b94
 8000b9c:	08001ba4 	.word	0x08001ba4
 8000ba0:	007a1200 	.word	0x007a1200
 8000ba4:	003d0900 	.word	0x003d0900

08000ba8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ba8:	4a5c      	ldr	r2, [pc, #368]	; (8000d1c <HAL_RCC_ClockConfig+0x174>)
 8000baa:	6813      	ldr	r3, [r2, #0]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	428b      	cmp	r3, r1
{
 8000bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bba:	d330      	bcc.n	8000c1e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bbc:	6832      	ldr	r2, [r6, #0]
 8000bbe:	0791      	lsls	r1, r2, #30
 8000bc0:	d43a      	bmi.n	8000c38 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bc2:	07d2      	lsls	r2, r2, #31
 8000bc4:	d440      	bmi.n	8000c48 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bc6:	4a55      	ldr	r2, [pc, #340]	; (8000d1c <HAL_RCC_ClockConfig+0x174>)
 8000bc8:	6813      	ldr	r3, [r2, #0]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	429d      	cmp	r5, r3
 8000bd0:	f0c0 8092 	bcc.w	8000cf8 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bd4:	6832      	ldr	r2, [r6, #0]
 8000bd6:	4c52      	ldr	r4, [pc, #328]	; (8000d20 <HAL_RCC_ClockConfig+0x178>)
 8000bd8:	f012 0f04 	tst.w	r2, #4
 8000bdc:	f040 8097 	bne.w	8000d0e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000be0:	0713      	lsls	r3, r2, #28
 8000be2:	d506      	bpl.n	8000bf2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000be4:	6863      	ldr	r3, [r4, #4]
 8000be6:	6932      	ldr	r2, [r6, #16]
 8000be8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000bf0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000bf2:	f7ff ffa7 	bl	8000b44 <HAL_RCC_GetSysClockFreq>
 8000bf6:	6863      	ldr	r3, [r4, #4]
 8000bf8:	22f0      	movs	r2, #240	; 0xf0
 8000bfa:	fa92 f2a2 	rbit	r2, r2
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c06:	40d3      	lsrs	r3, r2
 8000c08:	4a46      	ldr	r2, [pc, #280]	; (8000d24 <HAL_RCC_ClockConfig+0x17c>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	40d8      	lsrs	r0, r3
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <HAL_RCC_ClockConfig+0x180>)
 8000c10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fad8 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000c18:	2000      	movs	r0, #0
}
 8000c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c1e:	6813      	ldr	r3, [r2, #0]
 8000c20:	f023 0307 	bic.w	r3, r3, #7
 8000c24:	430b      	orrs	r3, r1
 8000c26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c28:	6813      	ldr	r3, [r2, #0]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d0c4      	beq.n	8000bbc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000c32:	2001      	movs	r0, #1
 8000c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c38:	4939      	ldr	r1, [pc, #228]	; (8000d20 <HAL_RCC_ClockConfig+0x178>)
 8000c3a:	68b0      	ldr	r0, [r6, #8]
 8000c3c:	684b      	ldr	r3, [r1, #4]
 8000c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c42:	4303      	orrs	r3, r0
 8000c44:	604b      	str	r3, [r1, #4]
 8000c46:	e7bc      	b.n	8000bc2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c48:	6872      	ldr	r2, [r6, #4]
 8000c4a:	4c35      	ldr	r4, [pc, #212]	; (8000d20 <HAL_RCC_ClockConfig+0x178>)
 8000c4c:	2a01      	cmp	r2, #1
 8000c4e:	d128      	bne.n	8000ca2 <HAL_RCC_ClockConfig+0xfa>
 8000c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c54:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c58:	6821      	ldr	r1, [r4, #0]
 8000c5a:	fa93 f3a3 	rbit	r3, r3
 8000c5e:	fab3 f383 	clz	r3, r3
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6c:	d0e1      	beq.n	8000c32 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c6e:	6863      	ldr	r3, [r4, #4]
 8000c70:	f023 0303 	bic.w	r3, r3, #3
 8000c74:	431a      	orrs	r2, r3
 8000c76:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000c78:	f7ff fad4 	bl	8000224 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c7c:	6873      	ldr	r3, [r6, #4]
 8000c7e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c80:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c82:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c86:	d11f      	bne.n	8000cc8 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c88:	6863      	ldr	r3, [r4, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d099      	beq.n	8000bc6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c92:	f7ff fac7 	bl	8000224 <HAL_GetTick>
 8000c96:	1bc0      	subs	r0, r0, r7
 8000c98:	4540      	cmp	r0, r8
 8000c9a:	d9f5      	bls.n	8000c88 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ca2:	2a02      	cmp	r2, #2
 8000ca4:	bf0c      	ite	eq
 8000ca6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000caa:	2302      	movne	r3, #2
 8000cac:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	6820      	ldr	r0, [r4, #0]
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	fab3 f383 	clz	r3, r3
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4203      	tst	r3, r0
 8000cc6:	e7d1      	b.n	8000c6c <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d110      	bne.n	8000cee <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ccc:	6863      	ldr	r3, [r4, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	f43f af77 	beq.w	8000bc6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd8:	f7ff faa4 	bl	8000224 <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	4540      	cmp	r0, r8
 8000ce0:	d9f4      	bls.n	8000ccc <HAL_RCC_ClockConfig+0x124>
 8000ce2:	e7db      	b.n	8000c9c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce4:	f7ff fa9e 	bl	8000224 <HAL_GetTick>
 8000ce8:	1bc0      	subs	r0, r0, r7
 8000cea:	4540      	cmp	r0, r8
 8000cec:	d8d6      	bhi.n	8000c9c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cee:	6863      	ldr	r3, [r4, #4]
 8000cf0:	f013 0f0c 	tst.w	r3, #12
 8000cf4:	d1f6      	bne.n	8000ce4 <HAL_RCC_ClockConfig+0x13c>
 8000cf6:	e766      	b.n	8000bc6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	f023 0307 	bic.w	r3, r3, #7
 8000cfe:	432b      	orrs	r3, r5
 8000d00:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	f003 0307 	and.w	r3, r3, #7
 8000d08:	429d      	cmp	r5, r3
 8000d0a:	d192      	bne.n	8000c32 <HAL_RCC_ClockConfig+0x8a>
 8000d0c:	e762      	b.n	8000bd4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	68f1      	ldr	r1, [r6, #12]
 8000d12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6063      	str	r3, [r4, #4]
 8000d1a:	e761      	b.n	8000be0 <HAL_RCC_ClockConfig+0x38>
 8000d1c:	40022000 	.word	0x40022000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	08001bd3 	.word	0x08001bd3
 8000d28:	20000000 	.word	0x20000000

08000d2c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000000 	.word	0x20000000

08000d38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	fa92 f2a2 	rbit	r2, r2
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d4c:	40d3      	lsrs	r3, r2
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000d54:	6810      	ldr	r0, [r2, #0]
}    
 8000d56:	40d8      	lsrs	r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	08001be3 	.word	0x08001be3
 8000d64:	20000000 	.word	0x20000000

08000d68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d6a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	fa92 f2a2 	rbit	r2, r2
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d7c:	40d3      	lsrs	r3, r2
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000d84:	6810      	ldr	r0, [r2, #0]
} 
 8000d86:	40d8      	lsrs	r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	08001be3 	.word	0x08001be3
 8000d94:	20000000 	.word	0x20000000

08000d98 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d98:	6803      	ldr	r3, [r0, #0]
{
 8000d9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d9e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000da0:	03d8      	lsls	r0, r3, #15
 8000da2:	d520      	bpl.n	8000de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da4:	4c50      	ldr	r4, [pc, #320]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000da6:	69e3      	ldr	r3, [r4, #28]
 8000da8:	00d9      	lsls	r1, r3, #3
 8000daa:	d444      	bmi.n	8000e36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	69e3      	ldr	r3, [r4, #28]
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	61e3      	str	r3, [r4, #28]
 8000db4:	69e3      	ldr	r3, [r4, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dbe:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc0:	4f4a      	ldr	r7, [pc, #296]	; (8000eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	05da      	lsls	r2, r3, #23
 8000dc6:	d538      	bpl.n	8000e3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000dc8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000dce:	d148      	bne.n	8000e62 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000dd0:	6a23      	ldr	r3, [r4, #32]
 8000dd2:	686a      	ldr	r2, [r5, #4]
 8000dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ddc:	b11e      	cbz	r6, 8000de6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dde:	69e3      	ldr	r3, [r4, #28]
 8000de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000de6:	6828      	ldr	r0, [r5, #0]
 8000de8:	07c1      	lsls	r1, r0, #31
 8000dea:	d506      	bpl.n	8000dfa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000dec:	4a3e      	ldr	r2, [pc, #248]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000dee:	68a9      	ldr	r1, [r5, #8]
 8000df0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	430b      	orrs	r3, r1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000dfa:	0682      	lsls	r2, r0, #26
 8000dfc:	d506      	bpl.n	8000e0c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000dfe:	4a3a      	ldr	r2, [pc, #232]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000e00:	68e9      	ldr	r1, [r5, #12]
 8000e02:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e04:	f023 0310 	bic.w	r3, r3, #16
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000e0c:	0603      	lsls	r3, r0, #24
 8000e0e:	d506      	bpl.n	8000e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000e10:	4a35      	ldr	r2, [pc, #212]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000e12:	6929      	ldr	r1, [r5, #16]
 8000e14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e16:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000e1e:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000e22:	d01b      	beq.n	8000e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000e24:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000e26:	6969      	ldr	r1, [r5, #20]
 8000e28:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000e32:	2000      	movs	r0, #0
 8000e34:	e012      	b.n	8000e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8000e36:	2600      	movs	r6, #0
 8000e38:	e7c2      	b.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000e42:	f7ff f9ef 	bl	8000224 <HAL_GetTick>
 8000e46:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	d4bc      	bmi.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4e:	f7ff f9e9 	bl	8000224 <HAL_GetTick>
 8000e52:	eba0 0008 	sub.w	r0, r0, r8
 8000e56:	2864      	cmp	r0, #100	; 0x64
 8000e58:	d9f6      	bls.n	8000e48 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8000e5a:	2003      	movs	r0, #3
}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e62:	686a      	ldr	r2, [r5, #4]
 8000e64:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d0b1      	beq.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e6c:	6a21      	ldr	r1, [r4, #32]
 8000e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e72:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000e76:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e7a:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8000e7e:	fab2 f282 	clz	r2, r2
 8000e82:	4472      	add	r2, lr
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	2701      	movs	r7, #1
 8000e88:	6017      	str	r7, [r2, #0]
 8000e8a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	4473      	add	r3, lr
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8000e9a:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e9c:	07c8      	lsls	r0, r1, #31
 8000e9e:	d597      	bpl.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000ea0:	f7ff f9c0 	bl	8000224 <HAL_GetTick>
 8000ea4:	f04f 0802 	mov.w	r8, #2
 8000ea8:	4682      	mov	sl, r0
 8000eaa:	46c1      	mov	r9, r8
 8000eac:	fa98 f3a8 	rbit	r3, r8
 8000eb0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb4:	b19b      	cbz	r3, 8000ede <HAL_RCCEx_PeriphCLKConfig+0x146>
 8000eb6:	6a22      	ldr	r2, [r4, #32]
 8000eb8:	fa99 f3a9 	rbit	r3, r9
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	fa07 f303 	lsl.w	r3, r7, r3
 8000ec8:	4213      	tst	r3, r2
 8000eca:	d181      	bne.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ecc:	f7ff f9aa 	bl	8000224 <HAL_GetTick>
 8000ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ed4:	eba0 000a 	sub.w	r0, r0, sl
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	d9e7      	bls.n	8000eac <HAL_RCCEx_PeriphCLKConfig+0x114>
 8000edc:	e7bd      	b.n	8000e5a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8000ede:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ee4:	e7e8      	b.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40007000 	.word	0x40007000
 8000ef0:	10908100 	.word	0x10908100

08000ef4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000ef4:	6803      	ldr	r3, [r0, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000efc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000f06:	2320      	movs	r3, #32
 8000f08:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_UART_Transmit_DMA>:
{
 8000f10:	b538      	push	{r3, r4, r5, lr}
 8000f12:	4604      	mov	r4, r0
 8000f14:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f16:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8000f1a:	2a20      	cmp	r2, #32
 8000f1c:	d12b      	bne.n	8000f76 <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 8000f1e:	b341      	cbz	r1, 8000f72 <HAL_UART_Transmit_DMA+0x62>
 8000f20:	b33b      	cbz	r3, 8000f72 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 8000f22:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8000f26:	2a01      	cmp	r2, #1
 8000f28:	d025      	beq.n	8000f76 <HAL_UART_Transmit_DMA+0x66>
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000f30:	6e20      	ldr	r0, [r4, #96]	; 0x60
    huart->TxXferCount = Size;
 8000f32:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f36:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f38:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f3a:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f3c:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize = Size;
 8000f42:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 8000f46:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8000f48:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8000f4a:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_UART_Transmit_DMA+0x70>)
 8000f4c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8000f4e:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <HAL_UART_Transmit_DMA+0x74>)
 8000f50:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8000f52:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8000f54:	6345      	str	r5, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8000f56:	3228      	adds	r2, #40	; 0x28
 8000f58:	f7ff fa18 	bl	800038c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	2240      	movs	r2, #64	; 0x40
 8000f60:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000f62:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8000f64:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8000f68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f6c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8000f6e:	4628      	mov	r0, r5
 8000f70:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8000f76:	2002      	movs	r0, #2
}
 8000f78:	bd38      	pop	{r3, r4, r5, pc}
 8000f7a:	bf00      	nop
 8000f7c:	08001013 	.word	0x08001013
 8000f80:	08001043 	.word	0x08001043
 8000f84:	08001097 	.word	0x08001097

08000f88 <HAL_UART_Receive_DMA>:
{
 8000f88:	4613      	mov	r3, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8000f8a:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8000f8e:	2a20      	cmp	r2, #32
{
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_READY)
 8000f94:	d133      	bne.n	8000ffe <HAL_UART_Receive_DMA+0x76>
    if((pData == NULL ) || (Size == 0U))
 8000f96:	2900      	cmp	r1, #0
 8000f98:	d02f      	beq.n	8000ffa <HAL_UART_Receive_DMA+0x72>
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d02d      	beq.n	8000ffa <HAL_UART_Receive_DMA+0x72>
    __HAL_LOCK(huart);
 8000f9e:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 8000fa2:	2a01      	cmp	r2, #1
 8000fa4:	d02b      	beq.n	8000ffe <HAL_UART_Receive_DMA+0x76>
 8000fa6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fa8:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8000faa:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000fae:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fb0:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->pRxBuffPtr = pData;
 8000fb2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8000fb4:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000fb8:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000fbc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_UART_Receive_DMA+0x7c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8000fc0:	6826      	ldr	r6, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000fc2:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <HAL_UART_Receive_DMA+0x80>)
 8000fc6:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_UART_Receive_DMA+0x84>)
 8000fca:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmarx->XferAbortCallback = NULL;
 8000fcc:	6345      	str	r5, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8000fce:	460a      	mov	r2, r1
 8000fd0:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8000fd4:	f7ff f9da 	bl	800038c <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000fd8:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8000fda:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fe4:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff4:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8000ffe:	2002      	movs	r0, #2
}
 8001000:	bd70      	pop	{r4, r5, r6, pc}
 8001002:	bf00      	nop
 8001004:	0800104f 	.word	0x0800104f
 8001008:	0800108b 	.word	0x0800108b
 800100c:	08001097 	.word	0x08001097

08001010 <HAL_UART_TxCpltCallback>:
 8001010:	4770      	bx	lr

08001012 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001012:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001014:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001016:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f013 0320 	ands.w	r3, r3, #32
 800101e:	d10b      	bne.n	8001038 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;
 8001020:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800102c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001038:	4610      	mov	r0, r2
 800103a:	f7ff ffe9 	bl	8001010 <HAL_UART_TxCpltCallback>
 800103e:	bd08      	pop	{r3, pc}

08001040 <HAL_UART_TxHalfCpltCallback>:
 8001040:	4770      	bx	lr

08001042 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001042:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8001044:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001046:	f7ff fffb 	bl	8001040 <HAL_UART_TxHalfCpltCallback>
 800104a:	bd08      	pop	{r3, pc}

0800104c <HAL_UART_RxCpltCallback>:
 800104c:	4770      	bx	lr

0800104e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800104e:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001050:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001052:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f013 0320 	ands.w	r3, r3, #32
 800105a:	d111      	bne.n	8001080 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
 800105c:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001060:	6813      	ldr	r3, [r2, #0]
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001068:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800106a:	6899      	ldr	r1, [r3, #8]
 800106c:	f021 0101 	bic.w	r1, r1, #1
 8001070:	6099      	str	r1, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001072:	6899      	ldr	r1, [r3, #8]
 8001074:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001078:	6099      	str	r1, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800107a:	2320      	movs	r3, #32
 800107c:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
  }

  HAL_UART_RxCpltCallback(huart);
 8001080:	4610      	mov	r0, r2
 8001082:	f7ff ffe3 	bl	800104c <HAL_UART_RxCpltCallback>
 8001086:	bd08      	pop	{r3, pc}

08001088 <HAL_UART_RxHalfCpltCallback>:
 8001088:	4770      	bx	lr

0800108a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800108a:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_RxHalfCpltCallback(huart);
 800108c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800108e:	f7ff fffb 	bl	8001088 <HAL_UART_RxHalfCpltCallback>
 8001092:	bd08      	pop	{r3, pc}

08001094 <HAL_UART_ErrorCallback>:
 8001094:	4770      	bx	lr

08001096 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001096:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8001098:	b508      	push	{r3, lr}

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800109a:	f891 3069 	ldrb.w	r3, [r1, #105]	; 0x69
 800109e:	2b21      	cmp	r3, #33	; 0x21
 80010a0:	d10d      	bne.n	80010be <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 80010a2:	680b      	ldr	r3, [r1, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	0612      	lsls	r2, r2, #24
 80010a8:	d509      	bpl.n	80010be <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 80010aa:	2200      	movs	r2, #0
 80010ac:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80010b6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80010b8:	2320      	movs	r3, #32
 80010ba:	f881 3069 	strb.w	r3, [r1, #105]	; 0x69
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80010be:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 80010c2:	2b22      	cmp	r3, #34	; 0x22
 80010c4:	d109      	bne.n	80010da <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 80010c6:	680b      	ldr	r3, [r1, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	065b      	lsls	r3, r3, #25
 80010cc:	d505      	bpl.n	80010da <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80010d4:	4608      	mov	r0, r1
 80010d6:	f7ff ff0d 	bl	8000ef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80010da:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	66cb      	str	r3, [r1, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80010e2:	4608      	mov	r0, r1
 80010e4:	f7ff ffd6 	bl	8001094 <HAL_UART_ErrorCallback>
 80010e8:	bd08      	pop	{r3, pc}

080010ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80010ea:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80010ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80010f4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80010f8:	f7ff ffcc 	bl	8001094 <HAL_UART_ErrorCallback>
 80010fc:	bd08      	pop	{r3, pc}
	...

08001100 <UART_SetConfig>:
{
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001104:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001106:	6921      	ldr	r1, [r4, #16]
 8001108:	68a3      	ldr	r3, [r4, #8]
 800110a:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800110c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800110e:	430b      	orrs	r3, r1
 8001110:	6961      	ldr	r1, [r4, #20]
 8001112:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001114:	4949      	ldr	r1, [pc, #292]	; (800123c <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001116:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001118:	4001      	ands	r1, r0
 800111a:	430b      	orrs	r3, r1
 800111c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800111e:	686b      	ldr	r3, [r5, #4]
 8001120:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001122:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001124:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001128:	430b      	orrs	r3, r1
 800112a:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800112c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800112e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001130:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001134:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001136:	430b      	orrs	r3, r1
 8001138:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800113a:	4b41      	ldr	r3, [pc, #260]	; (8001240 <UART_SetConfig+0x140>)
 800113c:	429d      	cmp	r5, r3
 800113e:	d112      	bne.n	8001166 <UART_SetConfig+0x66>
 8001140:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001144:	493f      	ldr	r1, [pc, #252]	; (8001244 <UART_SetConfig+0x144>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800114c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001150:	5ccb      	ldrb	r3, [r1, r3]
 8001152:	d13b      	bne.n	80011cc <UART_SetConfig+0xcc>
    switch (clocksource)
 8001154:	2b08      	cmp	r3, #8
 8001156:	d836      	bhi.n	80011c6 <UART_SetConfig+0xc6>
 8001158:	e8df f003 	tbb	[pc, r3]
 800115c:	3524210f 	.word	0x3524210f
 8001160:	3535352d 	.word	0x3535352d
 8001164:	30          	.byte	0x30
 8001165:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <UART_SetConfig+0x148>)
 8001168:	429d      	cmp	r5, r3
 800116a:	d003      	beq.n	8001174 <UART_SetConfig+0x74>
 800116c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001170:	429d      	cmp	r5, r3
 8001172:	d15e      	bne.n	8001232 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001174:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001178:	d131      	bne.n	80011de <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800117a:	f7ff fddd 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800117e:	6861      	ldr	r1, [r4, #4]
 8001180:	084a      	lsrs	r2, r1, #1
 8001182:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800118a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800118c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800118e:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001192:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001194:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001198:	4313      	orrs	r3, r2
 800119a:	60cb      	str	r3, [r1, #12]
 800119c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800119e:	f7ff fde3 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
 80011a2:	e7ec      	b.n	800117e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80011a4:	6860      	ldr	r0, [r4, #4]
 80011a6:	0843      	lsrs	r3, r0, #1
 80011a8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80011ac:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80011b4:	e7e9      	b.n	800118a <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011b6:	f7ff fcc5 	bl	8000b44 <HAL_RCC_GetSysClockFreq>
 80011ba:	e7e0      	b.n	800117e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011bc:	6860      	ldr	r0, [r4, #4]
 80011be:	0843      	lsrs	r3, r0, #1
 80011c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80011c4:	e7f4      	b.n	80011b0 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80011c6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e7e0      	b.n	800118e <UART_SetConfig+0x8e>
    switch (clocksource)
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d833      	bhi.n	8001238 <UART_SetConfig+0x138>
 80011d0:	e8df f003 	tbb	[pc, r3]
 80011d4:	321b1005 	.word	0x321b1005
 80011d8:	32323227 	.word	0x32323227
 80011dc:	2a          	.byte	0x2a
 80011dd:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011de:	f7ff fdab 	bl	8000d38 <HAL_RCC_GetPCLK1Freq>
 80011e2:	6863      	ldr	r3, [r4, #4]
 80011e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80011ec:	b280      	uxth	r0, r0
 80011ee:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80011f0:	2000      	movs	r0, #0
        break;
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011f4:	f7ff fdb8 	bl	8000d68 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <UART_SetConfig+0x140>)
 8001204:	b280      	uxth	r0, r0
 8001206:	60d8      	str	r0, [r3, #12]
 8001208:	e7f2      	b.n	80011f0 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800120a:	6862      	ldr	r2, [r4, #4]
 800120c:	0853      	lsrs	r3, r2, #1
 800120e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001212:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001216:	fbb3 f3f2 	udiv	r3, r3, r2
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <UART_SetConfig+0x140>)
 800121c:	b29b      	uxth	r3, r3
 800121e:	60d3      	str	r3, [r2, #12]
 8001220:	e7e6      	b.n	80011f0 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001222:	f7ff fc8f 	bl	8000b44 <HAL_RCC_GetSysClockFreq>
 8001226:	e7e7      	b.n	80011f8 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001228:	6862      	ldr	r2, [r4, #4]
 800122a:	0853      	lsrs	r3, r2, #1
 800122c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001230:	e7f1      	b.n	8001216 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001232:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001236:	d0c6      	beq.n	80011c6 <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001238:	2001      	movs	r0, #1
  return ret;
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	efff69f3 	.word	0xefff69f3
 8001240:	40013800 	.word	0x40013800
 8001244:	08001bb4 	.word	0x08001bb4
 8001248:	40004400 	.word	0x40004400

0800124c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800124c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800124e:	07da      	lsls	r2, r3, #31
{
 8001250:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001252:	d506      	bpl.n	8001262 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001254:	6801      	ldr	r1, [r0, #0]
 8001256:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001258:	684a      	ldr	r2, [r1, #4]
 800125a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800125e:	4322      	orrs	r2, r4
 8001260:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001262:	079c      	lsls	r4, r3, #30
 8001264:	d506      	bpl.n	8001274 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001266:	6801      	ldr	r1, [r0, #0]
 8001268:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800126a:	684a      	ldr	r2, [r1, #4]
 800126c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001270:	4322      	orrs	r2, r4
 8001272:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001274:	0759      	lsls	r1, r3, #29
 8001276:	d506      	bpl.n	8001286 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001278:	6801      	ldr	r1, [r0, #0]
 800127a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800127c:	684a      	ldr	r2, [r1, #4]
 800127e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001282:	4322      	orrs	r2, r4
 8001284:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001286:	071a      	lsls	r2, r3, #28
 8001288:	d506      	bpl.n	8001298 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800128a:	6801      	ldr	r1, [r0, #0]
 800128c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800128e:	684a      	ldr	r2, [r1, #4]
 8001290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001294:	4322      	orrs	r2, r4
 8001296:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001298:	06dc      	lsls	r4, r3, #27
 800129a:	d506      	bpl.n	80012aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800129c:	6801      	ldr	r1, [r0, #0]
 800129e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012a0:	688a      	ldr	r2, [r1, #8]
 80012a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012a6:	4322      	orrs	r2, r4
 80012a8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012aa:	0699      	lsls	r1, r3, #26
 80012ac:	d506      	bpl.n	80012bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012ae:	6801      	ldr	r1, [r0, #0]
 80012b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012b2:	688a      	ldr	r2, [r1, #8]
 80012b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012b8:	4322      	orrs	r2, r4
 80012ba:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012bc:	065a      	lsls	r2, r3, #25
 80012be:	d50f      	bpl.n	80012e0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012c0:	6801      	ldr	r1, [r0, #0]
 80012c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012c4:	684a      	ldr	r2, [r1, #4]
 80012c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80012ca:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012d0:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80012d2:	d105      	bne.n	80012e0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80012d4:	684a      	ldr	r2, [r1, #4]
 80012d6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80012d8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80012dc:	4322      	orrs	r2, r4
 80012de:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	d506      	bpl.n	80012f2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80012e4:	6802      	ldr	r2, [r0, #0]
 80012e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80012e8:	6853      	ldr	r3, [r2, #4]
 80012ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80012ee:	430b      	orrs	r3, r1
 80012f0:	6053      	str	r3, [r2, #4]
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <UART_WaitOnFlagUntilTimeout>:
{
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	9d06      	ldr	r5, [sp, #24]
 80012fa:	4604      	mov	r4, r0
 80012fc:	460f      	mov	r7, r1
 80012fe:	4616      	mov	r6, r2
 8001300:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001302:	6821      	ldr	r1, [r4, #0]
 8001304:	69ca      	ldr	r2, [r1, #28]
 8001306:	ea37 0302 	bics.w	r3, r7, r2
 800130a:	bf0c      	ite	eq
 800130c:	2201      	moveq	r2, #1
 800130e:	2200      	movne	r2, #0
 8001310:	42b2      	cmp	r2, r6
 8001312:	d002      	beq.n	800131a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001314:	2000      	movs	r0, #0
}
 8001316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800131a:	1c6b      	adds	r3, r5, #1
 800131c:	d0f2      	beq.n	8001304 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800131e:	b99d      	cbnz	r5, 8001348 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001328:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001332:	2320      	movs	r3, #32
 8001334:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001338:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800133c:	2300      	movs	r3, #0
 800133e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001342:	2003      	movs	r0, #3
 8001344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001348:	f7fe ff6c 	bl	8000224 <HAL_GetTick>
 800134c:	eba0 0008 	sub.w	r0, r0, r8
 8001350:	4285      	cmp	r5, r0
 8001352:	d2d6      	bcs.n	8001302 <UART_WaitOnFlagUntilTimeout+0xe>
 8001354:	e7e4      	b.n	8001320 <UART_WaitOnFlagUntilTimeout+0x2c>

08001356 <UART_CheckIdleState>:
{
 8001356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001358:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800135a:	2600      	movs	r6, #0
 800135c:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800135e:	f7fe ff61 	bl	8000224 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001368:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800136a:	d417      	bmi.n	800139c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	075b      	lsls	r3, r3, #29
 8001372:	d50a      	bpl.n	800138a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2200      	movs	r2, #0
 800137c:	462b      	mov	r3, r5
 800137e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001382:	4620      	mov	r0, r4
 8001384:	f7ff ffb6 	bl	80012f4 <UART_WaitOnFlagUntilTimeout>
 8001388:	b9a0      	cbnz	r0, 80013b4 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800138a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800138c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800138e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001392:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001396:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800139a:	e00c      	b.n	80013b6 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800139c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	4632      	mov	r2, r6
 80013a4:	4603      	mov	r3, r0
 80013a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ffa2 	bl	80012f4 <UART_WaitOnFlagUntilTimeout>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d0db      	beq.n	800136c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80013b4:	2003      	movs	r0, #3
}
 80013b6:	b002      	add	sp, #8
 80013b8:	bd70      	pop	{r4, r5, r6, pc}

080013ba <HAL_UART_Init>:
{
 80013ba:	b510      	push	{r4, lr}
  if(huart == NULL)
 80013bc:	4604      	mov	r4, r0
 80013be:	b360      	cbz	r0, 800141a <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80013c0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80013c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013c8:	b91b      	cbnz	r3, 80013d2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013ca:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80013ce:	f000 fa59 	bl	8001884 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80013d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013d4:	2324      	movs	r3, #36	; 0x24
 80013d6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fe8c 	bl	8001100 <UART_SetConfig>
 80013e8:	2801      	cmp	r0, #1
 80013ea:	d016      	beq.n	800141a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80013ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ee:	b113      	cbz	r3, 80013f6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff ff2b 	bl	800124c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013f6:	6823      	ldr	r3, [r4, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001406:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800140e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001410:	601a      	str	r2, [r3, #0]
}
 8001412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001416:	f7ff bf9e 	b.w	8001356 <UART_CheckIdleState>
}
 800141a:	2001      	movs	r0, #1
 800141c:	bd10      	pop	{r4, pc}

0800141e <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800141e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001422:	2b21      	cmp	r3, #33	; 0x21
 8001424:	d127      	bne.n	8001476 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8001426:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800142a:	6802      	ldr	r2, [r0, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	b94b      	cbnz	r3, 8001444 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001430:	6811      	ldr	r1, [r2, #0]
 8001432:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001436:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001438:	6811      	ldr	r1, [r2, #0]
 800143a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800143e:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001444:	6883      	ldr	r3, [r0, #8]
 8001446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800144a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800144c:	d10e      	bne.n	800146c <UART_Transmit_IT+0x4e>
 800144e:	6901      	ldr	r1, [r0, #16]
 8001450:	b961      	cbnz	r1, 800146c <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001452:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001456:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800145a:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800145c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800145e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001462:	3b01      	subs	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800146a:	e7e9      	b.n	8001440 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	8513      	strh	r3, [r2, #40]	; 0x28
 8001474:	e7f3      	b.n	800145e <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001476:	2002      	movs	r0, #2
  }
}
 8001478:	4770      	bx	lr

0800147a <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800147a:	6801      	ldr	r1, [r0, #0]
{
 800147c:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800147e:	680b      	ldr	r3, [r1, #0]
 8001480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001484:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001486:	2320      	movs	r3, #32
 8001488:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800148c:	f7ff fdc0 	bl	8001010 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001490:	2000      	movs	r0, #0
 8001492:	bd08      	pop	{r3, pc}

08001494 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001494:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001498:	2b22      	cmp	r3, #34	; 0x22
{
 800149a:	b510      	push	{r4, lr}
 800149c:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800149e:	d129      	bne.n	80014f4 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80014a0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a2:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80014a4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ac:	ea02 0201 	and.w	r2, r2, r1
 80014b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80014b2:	d11b      	bne.n	80014ec <UART_Receive_IT+0x58>
 80014b4:	6901      	ldr	r1, [r0, #16]
 80014b6:	b9c9      	cbnz	r1, 80014ec <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80014b8:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80014bc:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80014be:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80014c2:	3c01      	subs	r4, #1
 80014c4:	b2a4      	uxth	r4, r4
 80014c6:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80014ca:	b96c      	cbnz	r4, 80014e8 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014cc:	6803      	ldr	r3, [r0, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80014d4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80014de:	2320      	movs	r3, #32
 80014e0:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80014e4:	f7ff fdb2 	bl	800104c <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80014e8:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80014ea:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80014ec:	1c59      	adds	r1, r3, #1
 80014ee:	6541      	str	r1, [r0, #84]	; 0x54
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e7e4      	b.n	80014be <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	f042 0208 	orr.w	r2, r2, #8
 80014fa:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80014fc:	2002      	movs	r0, #2
 80014fe:	bd10      	pop	{r4, pc}

08001500 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001500:	6802      	ldr	r2, [r0, #0]
 8001502:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001504:	6811      	ldr	r1, [r2, #0]
{
 8001506:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001508:	f013 050f 	ands.w	r5, r3, #15
{
 800150c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800150e:	d107      	bne.n	8001520 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001510:	069e      	lsls	r6, r3, #26
 8001512:	d505      	bpl.n	8001520 <HAL_UART_IRQHandler+0x20>
 8001514:	068e      	lsls	r6, r1, #26
 8001516:	d503      	bpl.n	8001520 <HAL_UART_IRQHandler+0x20>
}
 8001518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800151c:	f7ff bfba 	b.w	8001494 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001520:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8001522:	2d00      	cmp	r5, #0
 8001524:	d05c      	beq.n	80015e0 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001526:	f010 0501 	ands.w	r5, r0, #1
 800152a:	d102      	bne.n	8001532 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800152c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001530:	d056      	beq.n	80015e0 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001532:	07d8      	lsls	r0, r3, #31
 8001534:	d507      	bpl.n	8001546 <HAL_UART_IRQHandler+0x46>
 8001536:	05ce      	lsls	r6, r1, #23
 8001538:	d505      	bpl.n	8001546 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800153a:	2001      	movs	r0, #1
 800153c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800153e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001540:	f040 0001 	orr.w	r0, r0, #1
 8001544:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001546:	0798      	lsls	r0, r3, #30
 8001548:	d506      	bpl.n	8001558 <HAL_UART_IRQHandler+0x58>
 800154a:	b12d      	cbz	r5, 8001558 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800154c:	2002      	movs	r0, #2
 800154e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001550:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001552:	f040 0004 	orr.w	r0, r0, #4
 8001556:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001558:	075e      	lsls	r6, r3, #29
 800155a:	d506      	bpl.n	800156a <HAL_UART_IRQHandler+0x6a>
 800155c:	b12d      	cbz	r5, 800156a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800155e:	2004      	movs	r0, #4
 8001560:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001562:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001564:	f040 0002 	orr.w	r0, r0, #2
 8001568:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800156a:	0718      	lsls	r0, r3, #28
 800156c:	d507      	bpl.n	800157e <HAL_UART_IRQHandler+0x7e>
 800156e:	068e      	lsls	r6, r1, #26
 8001570:	d400      	bmi.n	8001574 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001572:	b125      	cbz	r5, 800157e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001574:	2008      	movs	r0, #8
 8001576:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001578:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800157a:	4302      	orrs	r2, r0
 800157c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800157e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001580:	2a00      	cmp	r2, #0
 8001582:	d050      	beq.n	8001626 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001584:	0698      	lsls	r0, r3, #26
 8001586:	d504      	bpl.n	8001592 <HAL_UART_IRQHandler+0x92>
 8001588:	068a      	lsls	r2, r1, #26
 800158a:	d502      	bpl.n	8001592 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff81 	bl	8001494 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001592:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001594:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8001596:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001598:	d404      	bmi.n	80015a4 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800159e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80015a2:	d019      	beq.n	80015d8 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80015a4:	f7ff fca6 	bl	8000ef4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	0656      	lsls	r6, r2, #25
 80015ae:	d50f      	bpl.n	80015d0 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015b0:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80015b2:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015b8:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80015ba:	b148      	cbz	r0, 80015d0 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_UART_IRQHandler+0x128>)
 80015be:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80015c0:	f7fe ff21 	bl	8000406 <HAL_DMA_Abort_IT>
 80015c4:	b378      	cbz	r0, 8001626 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015c6:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80015c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015ce:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fd5f 	bl	8001094 <HAL_UART_ErrorCallback>
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80015d8:	f7ff fd5c 	bl	8001094 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015dc:	66e5      	str	r5, [r4, #108]	; 0x6c
 80015de:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80015e0:	02dd      	lsls	r5, r3, #11
 80015e2:	d50e      	bpl.n	8001602 <HAL_UART_IRQHandler+0x102>
 80015e4:	0246      	lsls	r6, r0, #9
 80015e6:	d50c      	bpl.n	8001602 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80015e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015ec:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80015ee:	2320      	movs	r3, #32
 80015f0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80015f4:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80015f6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80015fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80015fe:	f000 b815 	b.w	800162c <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001602:	061d      	lsls	r5, r3, #24
 8001604:	d506      	bpl.n	8001614 <HAL_UART_IRQHandler+0x114>
 8001606:	0608      	lsls	r0, r1, #24
 8001608:	d504      	bpl.n	8001614 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 800160a:	4620      	mov	r0, r4
}
 800160c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8001610:	f7ff bf05 	b.w	800141e <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001614:	065a      	lsls	r2, r3, #25
 8001616:	d506      	bpl.n	8001626 <HAL_UART_IRQHandler+0x126>
 8001618:	064b      	lsls	r3, r1, #25
 800161a:	d504      	bpl.n	8001626 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 800161c:	4620      	mov	r0, r4
}
 800161e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8001622:	f7ff bf2a 	b.w	800147a <UART_EndTransmit_IT>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	080010eb 	.word	0x080010eb

0800162c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800162c:	4770      	bx	lr

0800162e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162e:	b510      	push	{r4, lr}
 8001630:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001632:	2302      	movs	r3, #2
 8001634:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001636:	2310      	movs	r3, #16
 8001638:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001642:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f7ff f80c 	bl	8000660 <HAL_RCC_OscConfig>
 8001648:	4601      	mov	r1, r0
 800164a:	b100      	cbz	r0, 800164e <SystemClock_Config+0x20>
 800164c:	e7fe      	b.n	800164c <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001650:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001654:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001656:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001658:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800165c:	f7ff faa4 	bl	8000ba8 <HAL_RCC_ClockConfig>
 8001660:	b100      	cbz	r0, 8001664 <SystemClock_Config+0x36>
 8001662:	e7fe      	b.n	8001662 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001664:	9008      	str	r0, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001666:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001668:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	f7ff fb95 	bl	8000d98 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4604      	mov	r4, r0
 8001670:	b100      	cbz	r0, 8001674 <SystemClock_Config+0x46>
 8001672:	e7fe      	b.n	8001672 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001674:	f7ff fb5a 	bl	8000d2c <HAL_RCC_GetHCLKFreq>
 8001678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001680:	f7fe fe28 	bl	80002d4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001684:	2004      	movs	r0, #4
 8001686:	f7fe fe3b 	bl	8000300 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800168a:	4622      	mov	r2, r4
 800168c:	4621      	mov	r1, r4
 800168e:	f04f 30ff 	mov.w	r0, #4294967295
 8001692:	f7fe fddf 	bl	8000254 <HAL_NVIC_SetPriority>
}
 8001696:	b016      	add	sp, #88	; 0x58
 8001698:	bd10      	pop	{r4, pc}
	...

0800169c <main>:
{
 800169c:	b500      	push	{lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800169e:	4d4f      	ldr	r5, [pc, #316]	; (80017dc <main+0x140>)
{
 80016a0:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80016a2:	f7fe fda5 	bl	80001f0 <HAL_Init>
  SystemClock_Config();
 80016a6:	f7ff ffc2 	bl	800162e <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016aa:	696b      	ldr	r3, [r5, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016ac:	484c      	ldr	r0, [pc, #304]	; (80017e0 <main+0x144>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b2:	616b      	str	r3, [r5, #20]
 80016b4:	696b      	ldr	r3, [r5, #20]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	696b      	ldr	r3, [r5, #20]
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	616b      	str	r3, [r5, #20]
 80016c6:	696b      	ldr	r3, [r5, #20]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	696b      	ldr	r3, [r5, #20]
 80016d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d6:	616b      	str	r3, [r5, #20]
 80016d8:	696b      	ldr	r3, [r5, #20]
 80016da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016e2:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016e6:	f7fe ffb5 	bl	8000654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80016ea:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = LD3_Pin;
 80016ee:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80016f0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80016f4:	483a      	ldr	r0, [pc, #232]	; (80017e0 <main+0x144>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f7fe fef0 	bl	80004e0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	616b      	str	r3, [r5, #20]
 8001708:	696b      	ldr	r3, [r5, #20]
 800170a:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800170e:	4622      	mov	r2, r4
 8001710:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001714:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001718:	f7fe fd9c 	bl	8000254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800171c:	200e      	movs	r0, #14
 800171e:	f7fe fdcd 	bl	80002bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001722:	4622      	mov	r2, r4
 8001724:	4621      	mov	r1, r4
 8001726:	200f      	movs	r0, #15
 8001728:	f7fe fd94 	bl	8000254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800172c:	200f      	movs	r0, #15
 800172e:	f7fe fdc5 	bl	80002bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001732:	4622      	mov	r2, r4
 8001734:	4621      	mov	r1, r4
 8001736:	2010      	movs	r0, #16
 8001738:	f7fe fd8c 	bl	8000254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800173c:	2010      	movs	r0, #16
 800173e:	f7fe fdbd 	bl	80002bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001742:	4622      	mov	r2, r4
 8001744:	4621      	mov	r1, r4
 8001746:	2011      	movs	r0, #17
 8001748:	f7fe fd84 	bl	8000254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800174c:	2011      	movs	r0, #17
 800174e:	f7fe fdb5 	bl	80002bc <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8001752:	4824      	ldr	r0, [pc, #144]	; (80017e4 <main+0x148>)
  huart1.Init.BaudRate = 9600;
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <main+0x14c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001756:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8001758:	f44f 5616 	mov.w	r6, #9600	; 0x2580
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 9600;
 800175e:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001762:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001764:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001766:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001768:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800176a:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176c:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001770:	f7ff fe23 	bl	80013ba <HAL_UART_Init>
 8001774:	b100      	cbz	r0, 8001778 <main+0xdc>
 8001776:	e7fe      	b.n	8001776 <main+0xda>
  huart2.Instance = USART2;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <main+0x150>)
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <main+0x154>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177c:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800177e:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001780:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001786:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001788:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178a:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 9600;
 800178c:	e883 0044 	stmia.w	r3, {r2, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001790:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001792:	f7ff fe12 	bl	80013ba <HAL_UART_Init>
 8001796:	b100      	cbz	r0, 800179a <main+0xfe>
 8001798:	e7fe      	b.n	8001798 <main+0xfc>
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <main+0x158>)
 800179c:	4602      	mov	r2, r0
		buffer[i] = '.';
 800179e:	212e      	movs	r1, #46	; 0x2e
	for (i = 0; i < TXRXBUFFERSIZE; ++i) {
 80017a0:	3201      	adds	r2, #1
 80017a2:	b292      	uxth	r2, r2
 80017a4:	2a64      	cmp	r2, #100	; 0x64
		buffer[i] = '.';
 80017a6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < TXRXBUFFERSIZE; ++i) {
 80017aa:	d1f9      	bne.n	80017a0 <main+0x104>
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <main+0x15c>)
	len = sizeof(buffer);
 80017ae:	4c13      	ldr	r4, [pc, #76]	; (80017fc <main+0x160>)
	HAL_UART_Transmit_DMA(&huart1, buffer, len);
 80017b0:	4913      	ldr	r1, [pc, #76]	; (8001800 <main+0x164>)
 80017b2:	480c      	ldr	r0, [pc, #48]	; (80017e4 <main+0x148>)
 80017b4:	801a      	strh	r2, [r3, #0]
	len = sizeof(buffer);
 80017b6:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit_DMA(&huart1, buffer, len);
 80017b8:	f7ff fbaa 	bl	8000f10 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart2, buffer, len);
 80017bc:	8822      	ldrh	r2, [r4, #0]
 80017be:	4910      	ldr	r1, [pc, #64]	; (8001800 <main+0x164>)
 80017c0:	480a      	ldr	r0, [pc, #40]	; (80017ec <main+0x150>)
 80017c2:	f7ff fba5 	bl	8000f10 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, buffer, len);
 80017c6:	8822      	ldrh	r2, [r4, #0]
 80017c8:	490d      	ldr	r1, [pc, #52]	; (8001800 <main+0x164>)
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <main+0x148>)
 80017cc:	f7ff fbdc 	bl	8000f88 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart2, buffer, len);
 80017d0:	8822      	ldrh	r2, [r4, #0]
 80017d2:	490b      	ldr	r1, [pc, #44]	; (8001800 <main+0x164>)
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <main+0x150>)
 80017d6:	f7ff fbd7 	bl	8000f88 <HAL_UART_Receive_DMA>
 80017da:	e7fe      	b.n	80017da <main+0x13e>
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	20000138 	.word	0x20000138
 80017e8:	40013800 	.word	0x40013800
 80017ec:	2000020c 	.word	0x2000020c
 80017f0:	40004400 	.word	0x40004400
 80017f4:	200001a7 	.word	0x200001a7
 80017f8:	20000134 	.word	0x20000134
 80017fc:	2000027c 	.word	0x2000027c
 8001800:	200001a8 	.word	0x200001a8

08001804 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001804:	e7fe      	b.n	8001804 <_Error_Handler>
	...

08001808 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_MspInit+0x78>)
{
 800180a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	f042 0201 	orr.w	r2, r2, #1
 8001812:	619a      	str	r2, [r3, #24]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	f7fe fd06 	bl	8000230 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	4611      	mov	r1, r2
 8001828:	f06f 000b 	mvn.w	r0, #11
 800182c:	f7fe fd12 	bl	8000254 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	4611      	mov	r1, r2
 8001834:	f06f 000a 	mvn.w	r0, #10
 8001838:	f7fe fd0c 	bl	8000254 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	4611      	mov	r1, r2
 8001840:	f06f 0009 	mvn.w	r0, #9
 8001844:	f7fe fd06 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	4611      	mov	r1, r2
 800184c:	f06f 0004 	mvn.w	r0, #4
 8001850:	f7fe fd00 	bl	8000254 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	4611      	mov	r1, r2
 8001858:	f06f 0003 	mvn.w	r0, #3
 800185c:	f7fe fcfa 	bl	8000254 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	4611      	mov	r1, r2
 8001864:	f06f 0001 	mvn.w	r0, #1
 8001868:	f7fe fcf4 	bl	8000254 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	4611      	mov	r1, r2
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7fe fcee 	bl	8000254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001878:	b003      	add	sp, #12
 800187a:	f85d fb04 	ldr.w	pc, [sp], #4
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_UART_MspInit+0x168>)
 800188a:	4293      	cmp	r3, r2
{
 800188c:	b088      	sub	sp, #32
 800188e:	4605      	mov	r5, r0
  if(huart->Instance==USART1)
 8001890:	d155      	bne.n	800193e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_UART_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001894:	4c57      	ldr	r4, [pc, #348]	; (80019f4 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001896:	699a      	ldr	r2, [r3, #24]
 8001898:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800189c:	619a      	str	r2, [r3, #24]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ba:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f7fe fe0c 	bl	80004e0 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018c8:	494b      	ldr	r1, [pc, #300]	; (80019f8 <HAL_UART_MspInit+0x174>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ca:	60a6      	str	r6, [r4, #8]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018cc:	2310      	movs	r3, #16
 80018ce:	e884 000a 	stmia.w	r4, {r1, r3}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80018d6:	2320      	movs	r3, #32
 80018d8:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018da:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e0:	6126      	str	r6, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e2:	6166      	str	r6, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80018e4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80018e6:	f7fe fd1d 	bl	8000324 <HAL_DMA_Init>
 80018ea:	b118      	cbz	r0, 80018f4 <HAL_UART_MspInit+0x70>
    {
      _Error_Handler(__FILE__, __LINE__);
 80018ec:	217b      	movs	r1, #123	; 0x7b
 80018ee:	4843      	ldr	r0, [pc, #268]	; (80019fc <HAL_UART_MspInit+0x178>)
 80018f0:	f7ff ff88 	bl	8001804 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80018f4:	662c      	str	r4, [r5, #96]	; 0x60
 80018f6:	6265      	str	r5, [r4, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80018f8:	4c41      	ldr	r4, [pc, #260]	; (8001a00 <HAL_UART_MspInit+0x17c>)
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_UART_MspInit+0x180>)
 80018fc:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018fe:	2300      	movs	r3, #0
 8001900:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001902:	60a3      	str	r3, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001904:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001906:	6163      	str	r3, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001908:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800190a:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800190c:	61a3      	str	r3, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800190e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001914:	60e2      	str	r2, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001916:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001918:	f7fe fd04 	bl	8000324 <HAL_DMA_Init>
 800191c:	b118      	cbz	r0, 8001926 <HAL_UART_MspInit+0xa2>
    {
      _Error_Handler(__FILE__, __LINE__);
 800191e:	218b      	movs	r1, #139	; 0x8b
 8001920:	4836      	ldr	r0, [pc, #216]	; (80019fc <HAL_UART_MspInit+0x178>)
 8001922:	f7ff ff6f 	bl	8001804 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800192a:	666c      	str	r4, [r5, #100]	; 0x64
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800192c:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800192e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001930:	f7fe fc90 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001934:	2025      	movs	r0, #37	; 0x25

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001936:	f7fe fcc1 	bl	80002bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800193a:	b008      	add	sp, #32
 800193c:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART2)
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_UART_MspInit+0x184>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d1fa      	bne.n	800193a <HAL_UART_MspInit+0xb6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_UART_MspInit+0x16c>)
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001946:	4c31      	ldr	r4, [pc, #196]	; (8001a0c <HAL_UART_MspInit+0x188>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001948:	69da      	ldr	r2, [r3, #28]
 800194a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800194e:	61da      	str	r2, [r3, #28]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800195a:	230c      	movs	r3, #12
 800195c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001962:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001966:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800196c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001970:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f7fe fdb4 	bl	80004e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <HAL_UART_MspInit+0x18c>)
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197a:	60a6      	str	r6, [r4, #8]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800197c:	e884 0048 	stmia.w	r4, {r3, r6}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001984:	2320      	movs	r3, #32
 8001986:	61a3      	str	r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001988:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800198a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198e:	6126      	str	r6, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001990:	6166      	str	r6, [r4, #20]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001992:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001994:	f7fe fcc6 	bl	8000324 <HAL_DMA_Init>
 8001998:	b118      	cbz	r0, 80019a2 <HAL_UART_MspInit+0x11e>
      _Error_Handler(__FILE__, __LINE__);
 800199a:	21b6      	movs	r1, #182	; 0xb6
 800199c:	4817      	ldr	r0, [pc, #92]	; (80019fc <HAL_UART_MspInit+0x178>)
 800199e:	f7ff ff31 	bl	8001804 <_Error_Handler>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_UART_MspInit+0x190>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019a4:	666c      	str	r4, [r5, #100]	; 0x64
 80019a6:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80019a8:	4c1b      	ldr	r4, [pc, #108]	; (8001a18 <HAL_UART_MspInit+0x194>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019aa:	f04f 0c10 	mov.w	ip, #16
 80019ae:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019b6:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b8:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80019ba:	2320      	movs	r3, #32
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019bc:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80019be:	61a3      	str	r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019c0:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	60e2      	str	r2, [r4, #12]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80019c8:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80019ca:	f7fe fcab 	bl	8000324 <HAL_DMA_Init>
 80019ce:	b118      	cbz	r0, 80019d8 <HAL_UART_MspInit+0x154>
      _Error_Handler(__FILE__, __LINE__);
 80019d0:	21c6      	movs	r1, #198	; 0xc6
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <HAL_UART_MspInit+0x178>)
 80019d4:	f7ff ff16 	bl	8001804 <_Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019dc:	662c      	str	r4, [r5, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019de:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80019e0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e2:	f7fe fc37 	bl	8000254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e6:	2026      	movs	r0, #38	; 0x26
 80019e8:	e7a5      	b.n	8001936 <HAL_UART_MspInit+0xb2>
 80019ea:	bf00      	nop
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40021000 	.word	0x40021000
 80019f4:	20000068 	.word	0x20000068
 80019f8:	40020044 	.word	0x40020044
 80019fc:	08001bb8 	.word	0x08001bb8
 8001a00:	200000ac 	.word	0x200000ac
 8001a04:	40020058 	.word	0x40020058
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	20000024 	.word	0x20000024
 8001a10:	4002006c 	.word	0x4002006c
 8001a14:	40020080 	.word	0x40020080
 8001a18:	200000f0 	.word	0x200000f0

08001a1c <SVC_Handler>:
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a22:	f7fe fbf7 	bl	8000214 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a2a:	f7fe bc76 	b.w	800031a <HAL_SYSTICK_IRQHandler>
	...

08001a30 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a30:	4801      	ldr	r0, [pc, #4]	; (8001a38 <DMA1_Channel4_IRQHandler+0x8>)
 8001a32:	f7fe bd0c 	b.w	800044e <HAL_DMA_IRQHandler>
 8001a36:	bf00      	nop
 8001a38:	20000068 	.word	0x20000068

08001a3c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a3c:	4801      	ldr	r0, [pc, #4]	; (8001a44 <DMA1_Channel5_IRQHandler+0x8>)
 8001a3e:	f7fe bd06 	b.w	800044e <HAL_DMA_IRQHandler>
 8001a42:	bf00      	nop
 8001a44:	200000ac 	.word	0x200000ac

08001a48 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a48:	4801      	ldr	r0, [pc, #4]	; (8001a50 <DMA1_Channel6_IRQHandler+0x8>)
 8001a4a:	f7fe bd00 	b.w	800044e <HAL_DMA_IRQHandler>
 8001a4e:	bf00      	nop
 8001a50:	20000024 	.word	0x20000024

08001a54 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a54:	4801      	ldr	r0, [pc, #4]	; (8001a5c <DMA1_Channel7_IRQHandler+0x8>)
 8001a56:	f7fe bcfa 	b.w	800044e <HAL_DMA_IRQHandler>
 8001a5a:	bf00      	nop
 8001a5c:	200000f0 	.word	0x200000f0

08001a60 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a60:	4801      	ldr	r0, [pc, #4]	; (8001a68 <USART1_IRQHandler+0x8>)
 8001a62:	f7ff bd4d 	b.w	8001500 <HAL_UART_IRQHandler>
 8001a66:	bf00      	nop
 8001a68:	20000138 	.word	0x20000138

08001a6c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a6c:	4801      	ldr	r0, [pc, #4]	; (8001a74 <USART2_IRQHandler+0x8>)
 8001a6e:	f7ff bd47 	b.w	8001500 <HAL_UART_IRQHandler>
 8001a72:	bf00      	nop
 8001a74:	2000020c 	.word	0x2000020c

08001a78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a78:	4915      	ldr	r1, [pc, #84]	; (8001ad0 <SystemInit+0x58>)
 8001a7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <SystemInit+0x5c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001a90:	6858      	ldr	r0, [r3, #4]
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <SystemInit+0x60>)
 8001a94:	4002      	ands	r2, r0
 8001a96:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ab2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	f022 020f 	bic.w	r2, r2, #15
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001abc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <SystemInit+0x64>)
 8001ac0:	4002      	ands	r2, r0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001acc:	608b      	str	r3, [r1, #8]
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	f87fc00c 	.word	0xf87fc00c
 8001adc:	ff00fccc 	.word	0xff00fccc

08001ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ae4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ae6:	e003      	b.n	8001af0 <LoopCopyDataInit>

08001ae8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001aea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001aec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001aee:	3104      	adds	r1, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001af4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001af6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001af8:	d3f6      	bcc.n	8001ae8 <CopyDataInit>
	ldr	r2, =_sbss
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001afc:	e002      	b.n	8001b04 <LoopFillZerobss>

08001afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001afe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b00:	f842 3b04 	str.w	r3, [r2], #4

08001b04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <LoopForever+0x16>)
	cmp	r2, r3
 8001b06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b08:	d3f9      	bcc.n	8001afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b0a:	f7ff ffb5 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f000 f811 	bl	8001b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b12:	f7ff fdc3 	bl	800169c <main>

08001b16 <LoopForever>:

LoopForever:
    b LoopForever
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b18:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b1c:	08001bf4 	.word	0x08001bf4
	ldr	r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b24:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001b28:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001b2c:	20000280 	.word	0x20000280

08001b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>
	...

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	4e0d      	ldr	r6, [pc, #52]	; (8001b6c <__libc_init_array+0x38>)
 8001b38:	4c0d      	ldr	r4, [pc, #52]	; (8001b70 <__libc_init_array+0x3c>)
 8001b3a:	1ba4      	subs	r4, r4, r6
 8001b3c:	10a4      	asrs	r4, r4, #2
 8001b3e:	2500      	movs	r5, #0
 8001b40:	42a5      	cmp	r5, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	4e0b      	ldr	r6, [pc, #44]	; (8001b74 <__libc_init_array+0x40>)
 8001b46:	4c0c      	ldr	r4, [pc, #48]	; (8001b78 <__libc_init_array+0x44>)
 8001b48:	f000 f818 	bl	8001b7c <_init>
 8001b4c:	1ba4      	subs	r4, r4, r6
 8001b4e:	10a4      	asrs	r4, r4, #2
 8001b50:	2500      	movs	r5, #0
 8001b52:	42a5      	cmp	r5, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b5c:	4798      	blx	r3
 8001b5e:	3501      	adds	r5, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b66:	4798      	blx	r3
 8001b68:	3501      	adds	r5, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001bec 	.word	0x08001bec
 8001b70:	08001bec 	.word	0x08001bec
 8001b74:	08001bec 	.word	0x08001bec
 8001b78:	08001bf0 	.word	0x08001bf0

08001b7c <_init>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	bf00      	nop
 8001b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b82:	bc08      	pop	{r3}
 8001b84:	469e      	mov	lr, r3
 8001b86:	4770      	bx	lr

08001b88 <_fini>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr
